(in-package #:org.shirakumo.fraf.speechless)

(defun maybe-unwrap (thing)
  (if (and (listp thing) (eql 'progn (first thing)) (null (cddr thing)))
      (second thing)
      thing))

(markless:define-output (speechless (markless:markless)) (c s)
  (mcomponents:label () (format s "> ~a" (mcomponents:target c)))
  (components:jump () (format s "< ~a" (mcomponents:target c)))
  (components:source () (format s "~~ ~s" (components:name c)))
  (components:placeholder () (format s "{~s}" (components:form c)))
  (components:emote () (format s "(:~s)" (components:emote c)))
  (components:go () (format s "! go ~s" (mcomponents:target c)))
  (components:speed () (format s "! speed ~s" (components:speed c)))
  (components:setf () (format s "! setf ~s ~s" (components:place c) (components:form c)))
  (components:eval () (format s "! eval ~s" (maybe-unwrap (components:form c))))
  (components:conditional ()
    (destructuring-bind (condition . children) (aref (components:clauses c) 0)
      (format s "? ~s" condition)
      (let ((markless::*prefixes* (list* "| " markless::*prefixes*)))
        (when (< 0 (length children))
          (format s "~&~{~a~}" (reverse markless::*prefixes*)))
        (markless:output children)))
    (loop for i from 1 below (length (components:clauses c))
          do (destructuring-bind (condition . children) (aref (components:clauses c) i)
               (format s "~&~{~a~}" (reverse markless::*prefixes*))
               (if (eql condition T) (format s "|?") (format s "|? ~s" condition))
               (let ((markless::*prefixes* (list* "| " markless::*prefixes*)))
                 (markless:output children)))))
  (components:conditional-part ()
    (format s "[~s " (components:form c))
    (loop for i from 0 below (length (components:choices c))
          do (loop for content across (aref (components:choices c) i)
                   do (format s "~a" content))
             (when (< i (1- (length (components:choices c))))
               (format s "|")))
    (format s "]")))

(defmethod markless:output-component :around (component target (format speechless))
  (let ((*print-case* :downcase)
        (*print-right-margin* 1000000000))
    (call-next-method)))
